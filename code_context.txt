# File: src/adapters/exchange/delta.js
const market = require("./marketData"); // public
const trade = require("./trading"); // private

module.exports = {
  ...market,
  ...trade,
};


# File: src/adapters/exchange/deltaRest.js
const axios = require("axios");
const { delta } = require("../../config/env");
const { generateSignature, serializeQuery } = require("./utils");

const instance = axios.create({
  baseURL: delta.restUrl,
  timeout: 5000,
  headers: { "Content-Type": "application/json" },
});

async function request(method, path, params = {}, body = {}) {
  const timestamp = Date.now().toString();
  const queryStr = serializeQuery(params);
  const bodyStr = method === "GET" || !body ? "" : JSON.stringify(body);
  const fullPath = path + (queryStr ? `?${queryStr}` : "");

  const apiPathForSignature = `/v2${path}`; // <-- ðŸ”¥ critical correction ðŸ”¥

  const signature = generateSignature(
    delta.secret,
    timestamp,
    method,
    apiPathForSignature,
    queryStr,
    bodyStr
  );

  const headers = {
    "api-key": delta.key,
    timestamp: timestamp,
    signature: signature,
  };

  return instance
    .request({
      method,
      url: fullPath, // <-- always prefix with /v2
      params,
      data: body,
      headers,
    })
    .then((res) => res.data);
}

module.exports = { request };


# File: src/adapters/exchange/marketData.js
const { publicRequest } = require("./publicRest");

async function listProducts() {
  return publicRequest("GET", "/v2/products");
}

module.exports = { listProducts };


# File: src/adapters/exchange/products.js
const { listProducts } = require("./marketData");
let cache = [];

let readyP = refresh();

async function refresh() {
  const body = await listProducts();
  cache = Array.isArray(body.result) ? body.result : body;
  setTimeout(refresh, 60 * 60 * 1000); // refresh hourly
  return cache;
}

module.exports = {
  bySymbol: (s) => cache.find((p) => p.symbol === s),
  ready: () => readyP,
};


# File: src/adapters/exchange/publicRest.js
const axios = require("axios");
const { delta } = require("../../config/env");

const instance = axios.create({
  baseURL: delta.restUrl,
  timeout: 5000,
  headers: { "Content-Type": "application/json" },
});

async function publicRequest(method, path, params = {}) {
  return instance
    .request({ method, url: path, params })
    .then((res) => res.data);
}

module.exports = { publicRequest };


# File: src/adapters/exchange/symbolMap.js
// Adapts TradingView symbols to India DeltaExchange symbols
const SYMBOL_MAP = {
  'BTCUSD.P': 'BTCUSD',
  'BTCUSDT.P': 'BTCUSDT',
  'ETHUSD.P': 'ETHUSD',
  // add more mappings here
};

function normalizeSymbol(symbol) {
  return SYMBOL_MAP[symbol] || symbol;
}

module.exports = { normalizeSymbol };


# File: src/adapters/exchange/trading.js
// src/adapters/exchange/trading.js
const { request } = require("./deltaRest");

async function placeOrder(order) {
  return request("POST", "/v2/orders", {}, order);
}

async function cancelOrder(order_id) {
  return request("DELETE", `/v2/orders/${order_id}`);
}

async function changeLeverage(payload) {
  return request("POST", "/v2/positions/change_leverage", {}, payload);
}

async function getBalances() {
  return request("GET", "/v2/wallet/balances");
}

module.exports = { placeOrder, cancelOrder, changeLeverage, getBalances };


# File: src/adapters/exchange/utils.js
const crypto = require("crypto");

function generateSignature(secret, timestamp, method, path, query, body) {
  const payload = `${timestamp}${method}${path}${query}${body}`;
  return crypto.createHmac("sha256", secret).update(payload).digest("hex");
}

function serializeQuery(params = {}) {
  const keys = Object.keys(params).sort();
  return keys.map((k) => `${k}=${encodeURIComponent(params[k])}`).join("&");
}

module.exports = { generateSignature, serializeQuery };


# File: src/adapters/http/health.js
module.exports = (feed) => (_, res) => res.json({ wsUp: feed.isConnected() });


# File: src/adapters/http/tradingview.js
const Ajv = require("ajv");
const ajv = new Ajv();

const schema = {
  type: "object",
  required: ["action", "product", "side", "qty"],
  properties: {
    action: { enum: ["OPEN", "CLOSE"] },
    product: { type: "string" },
    side: { enum: ["buy", "sell"] },
    qty: { type: "number" },
    client_order_id: { type: "string" }, // âœ… added this line
  },
  additionalProperties: false,
};

const validate = ajv.compile(schema);

module.exports =
  ({ openCmd, closeCmd }) =>
  async (req, res, next) => {
    if (!validate(req.body)) {
      return res
        .status(400)
        .json({ error: "Invalid payload", details: validate.errors });
    }

    try {
      const { action, ...data } = req.body;
      if (action === "OPEN") await openCmd(data);
      if (action === "CLOSE") await closeCmd(data);
      res.json({ success: true });
    } catch (err) {
      next(err);
    }
  };


# File: src/adapters/persistence/memoryPositions.js
const map = new Map();
module.exports = {
  upsert: (id, data) => map.set(id, { ...map.get(id), ...data }),
  get: (id) => map.get(id),
  del: (id) => map.delete(id),
  all: () => Array.from(map.values()),
};


# File: src/application/commands/closePosition.js
module.exports =
  ({ exchange, store }) =>
  async ({ product }) => {
    const pos = store.all().find((p) => p.symbol === product);
    if (!pos) throw new Error("no open position");

    await exchange.placeOrder({
      product_id: pos.product_id,
      size: pos.size,
      side: pos.side === "buy" ? "sell" : "buy",
      order_type: "market",
      reduce_only: true,
    });

    store.del(pos.product_id);
  };


# File: src/application/commands/openPosition.js
const { normalizeSymbol } = require("../../adapters/exchange/symbolMap");

module.exports =
  ({ exchange, products, store, risk }) =>
  async ({ product, side, qty }) => {
    const symbol = normalizeSymbol(product);
    const prod = products.bySymbol(symbol);
    if (!prod) throw new Error(`unknown product ${symbol}`);

    const price = parseFloat(prod.mark_price || prod.close_price);
    const targets = risk.calcTargets(price, side);

    await exchange.placeOrder({
      product_id: prod.id,
      size: qty,
      side,
      order_type: "market",
      reduce_only: false,
      post_only: false,
    });

    store.upsert(prod.id, {
      product_id: prod.id,
      symbol: prod.symbol,
      side,
      size: qty,
      sl: targets.sl,
      tp: targets.tp,
    });
  };


# File: src/application/schedulers/riskCron.js
// src/application/schedulers/riskCron.js
/* eslint-disable no-await-in-loop */
const cron = require("node-cron");
const logger = require("../../config/logger");

/**
 * Runs every 5 s:
 *  â€¢ pulls the latest mark-price for each *distinct* symbol we hold
 *  â€¢ checks SL / TP stored on the position object
 *  â€¢ calls closeCmd() when either level is crossed
 */
module.exports = ({ exchange, store, closeCmd }) => {
  cron.schedule("*/5 * * * * *", async () => {
    const positions = store.all();
    if (positions.length === 0) return;

    // ---- 1. grab one ticker per symbol ---------------------------------
    const symbols = [...new Set(positions.map((p) => p.symbol))];
    const priceMap = {};

    for (const sym of symbols) {
      try {
        const tkr = await exchange.ticker({ symbol: sym }); // parsed JSON
        // mark_price for futures / close for spot; pick what exists
        priceMap[sym] = parseFloat(
          tkr.mark_price ?? tkr.close ?? tkr.price ?? tkr.p
        );
      } catch (err) {
        logger.warn(`ticker failed for ${sym}: ${err.message}`);
      }
    }

    // ---- 2. evaluate each position -------------------------------------
    for (const pos of positions) {
      const ltp = priceMap[pos.symbol];
      if (!ltp) continue; // no price, skip this round

      const isLong = pos.side.toLowerCase() === "buy";
      const hitSL = isLong ? ltp <= pos.sl : ltp >= pos.sl;
      const hitTP = isLong ? ltp >= pos.tp : ltp <= pos.tp;

      if (!hitSL && !hitTP) continue;

      try {
        logger.info(
          `RiskCron: ${hitSL ? "SL" : "TP"} triggered on ${pos.symbol} @ ${ltp}`
        );

        await closeCmd({
          product: pos.symbol,
          client_order_id: `risk-${Date.now()}`,
        });

        store.del(pos.product_id);
      } catch (err) {
        logger.error(`RiskCron close failed: ${err.message}`);
      }
    }
  });
};


# File: src/config/env.js
require("dotenv").config();

function must(name) {
  const v = process.env[name];
  if (!v) throw new Error(`${name} not set in .env`);
  return v;
}

module.exports = {
  port: process.env.PORT || 3000,
  delta: {
    key: must('DELTA_API_KEY'),
    secret: must('DELTA_API_SECRET'),
    restUrl: process.env.DELTA_BASE_URL || "https://api.india.delta.exchange",
  },
};


# File: src/config/logger.js
const { createLogger, format, transports } = require("winston");
const safeStringify = require('fast-safe-stringify'); // âœ… new package

module.exports = createLogger({
  level: process.env.LOG_LEVEL || "info",
  format: format.combine(
    format.colorize(),
    format.timestamp({ format: "YYYY-MM-DD HH:mm:ss.SSS" }),
    format.printf(({ timestamp, level, message, ...meta }) => {
      const metaStr = Object.keys(meta).length ? ' ' + safeStringify(meta) : '';
      return `${timestamp} ${level}: ${message}${metaStr}`;
    })
  ),
  transports: [new transports.Console()],
});


# File: src/domain/services/RiskService.js
class RiskService {
  static calcTargets(price, side, atr = 0.005) {
    const sl =
      side.toLowerCase() === "buy" ? price * (1 - atr) : price * (1 + atr);
    const tp =
      side.toLowerCase() === "buy"
        ? price * (1 + 2 * atr)
        : price * (1 - 2 * atr);
    return { sl, tp };
  }
}
module.exports = RiskService;


# File: src/index.js
const express = require("express");
const bodyParser = require("body-parser");
const morgan = require("morgan");
const logger = require("./config/logger");
const env = require("./config/env");

const exchange = require("./adapters/exchange/delta");
const products = require("./adapters/exchange/products");
const store = require("./adapters/persistence/memoryPositions");
const risk = require("./domain/services/RiskService");

const openCmd = require("./application/commands/openPosition")({
  exchange,
  products,
  store,
  risk,
});
const closeCmd = require("./application/commands/closePosition")({
  exchange,
  store,
});

(async () => {
  const list = await products.ready();
  logger.info(`Loaded ${list.length} products`);

  const deps = { openCmd, closeCmd };

  const app = express();
  app.use(bodyParser.json());

  morgan.token("body", (req) =>
    req.method === "POST" ? JSON.stringify(req.body).slice(0, 200) : ""
  );
  app.use(
    morgan(":method :url :status :response-time ms :body", {
      immediate: true,
      stream: { write: (msg) => logger.http(msg.trim()) },
    })
  );

  app.use("/webhooks", require("./adapters/http/tradingview")(deps));
  app.get("/healthz", (_, res) => res.json({ ok: true }));

  app.listen(env.port, () => logger.info(`API running on port ${env.port}`));
})();


